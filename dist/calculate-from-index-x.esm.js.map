{"version":3,"sources":["../src/calculate-from-index-x.js"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,aAArB;AACA,OAAO,QAAP,MAAqB,aAArB;AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,WAAP,MAAwB,iBAAxB;;AAEA,IAAM,MAAM,GAAG,SAAS,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB;AACnC,SAAO,CAAC,IAAI,CAAL,GAAS,CAAT,GAAa,CAApB;AACD,CAFD;AAIA;;;;;;;;;;;AASA,IAAM,aAAa,GAAG,SAAS,aAAT,CAAuB,KAAvB,EAA8B,SAA9B,EAAyC;AAC7D,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAD,CAAvB;;AAEA,MAAI,WAAW,CAAC,MAAD,CAAX,KAAwB,KAA5B,EAAmC;AACjC,WAAO,CAAP;AACD;;AAED,MAAM,KAAK,GAAG,SAAS,CAAC,SAAD,CAAvB;AAEA,SAAO,KAAK,IAAI,CAAT,GAAa,KAAb,GAAqB,MAAM,CAAC,CAAD,EAAI,QAAQ,CAAC,MAAM,CAAC,MAAR,CAAR,GAA0B,KAA9B,CAAlC;AACD,CAVD;;AAYA,eAAe,aAAf","file":"calculate-from-index-x.esm.js","sourcesContent":["import toObject from 'to-object-x';\nimport toLength from 'to-length-x';\nimport toInteger from 'to-integer-x';\nimport isArrayLike from 'is-array-like-x';\n\nconst getMax = function getMax(a, b) {\n  return a >= b ? a : b;\n};\n\n/**\n * This method calculates a fromIndex of a given value for an array.\n *\n * @param {Array} array - * The array on which to calculate the starting index.\n * @throws {TypeError} If array is null or undefined.\n * @param {number} fromIndex - * The position in this array at which to begin. A\n *  negative value gives the index of array.length + fromIndex by asc.\n * @returns {number} The calculated fromIndex. Default is 0.\n */\nconst calcFromIndex = function calcFromIndex(array, fromIndex) {\n  const object = toObject(array);\n\n  if (isArrayLike(object) === false) {\n    return 0;\n  }\n\n  const index = toInteger(fromIndex);\n\n  return index >= 0 ? index : getMax(0, toLength(object.length) + index);\n};\n\nexport default calcFromIndex;\n"]}